The goal of this addon is to let us generate additional parts of the armature by taking in the current set of bones as the input.
To do this, we implement a new nodegraph using the python API.
The output node of this nodegraph takes a list of bones as its parameter, which should be created, and the rest of the nodegraph is responsible for generating this list of bones.
For now for simplicity's sake, the nodegraph should only be executed by an operator which is explicitly called, but ideally this would have to be a live updated thing in the future, which would probably require a lot of optimization and low level implementation.
Keeping it simple like this should let us implement something usable in just a few days!

I think the code for some nodes could be generated.
For example, nodes that get and set bone properties, would involve a lot of code duplication, so we could just set up a dummy python file with some keywords surrounded by <> that need to be filled in by some parameters in a generator, then we run basic replace functions over it to get the final .py file.

Current folder structure:
Maybe each folder can simply be a file instead. We should look at AnimationNodes.

Initial goals: Build UI, let a node create a bone when node tree is manually executed.

An Armature can have a list of Armature NodeTrees, just like an object can have a list of Material NodeTrees.
The NodeTree is assigned some selection of bones as its input, with Assign/Remove/Select/Deselect operators, just like vertices to a vertex group.
Pressing the Generate button will execute() the output node of each node tree, from top to bottom.
The execute() of the output node collects a list of edit bone information and then creates those edit bones.
    Problem: Can we pass dummy instances of the EditBone class around the nodes? Probably yeah, I guess. Or can they only store instances of bpy.props?
Medium things:
- HIGH Let me access armature layers(or whatever they become) from weight paint mode.
- LOW Thicker/brighter edge drawing for bone shapes (Or edges in general)
- MED Mask for Surface Deform modifier

- MED Sculpting works poorly with mirror modifier, especially when sculpting shape keys, especially especially when sculpting shape keys on a mesh deformed by an armature.
- LOW Let me snap bones to other bones(not just the head or tail but anywhere in between) in both edit and pose mode - and don't forget about bbone splining!
- HIGH Weight paint: Changing brushes is an absolute pain and there's no way around it, even with a custom addon.
- Let this behaviour be the default, just like in sculpt mode:
    Left Mouse Button - paint Add
    Ctrl + Left Mouse Button - paint Substract
    Shift + Left Mouse Button - paint Blur
- HIGH Weight paint: Overlay shouldn't be affected by shading mode or matcaps or materials or textures, etc.

Small things: (All of these are low prio)
- When changing order of bone constraints, they don't get updated in the viewport.
- When in paint modes(using a brush) and 2D Falloff is disabled, the brush cursor shouldn't display when the mouse isn't over the mesh's surface, to indicate that in these cases, the brush stroke will not do anything.
- These things don't have an undo step:
	- Unlink Action
	- Clear Pose Constraints operator
- ME! When unparenting a bone with Alt+P, Disconnect Bone option shouldn't show up when none of the bones are connected.
    - https://developer.blender.org/D6100
    - Could try adding warnings instead of empty menus, eg. RNA_warning("Expected an integer active data property");
- ME! use_connect should never be able to be true when there is no parent. It causes the head of the bone to stop drawing.
    - https://developer.blender.org/D6101
- When deleting an object, there's no need to preserve references to it in bone shapes or custom properties.
    - Preserving bone shapes used to make some kind of sense before we had collections (even then, it was kind of bad practice) since otherwise they would take up a precious layer. This is no longer the case, and this bad workflow should no longer be supported. Bone shapes should be put in a collection and hidden via collection visibility settings.
    - Preserving references in custom properties is just nonsense, and causes terrible things to happen when deleting proxy armatures that are still being referenced by a custom property.
    - Delete should mean Delete. Not "sometimes kinda delete if I feel like it."
- ME? When deleting from a list like vertex groups or shape keys, the search functionality is ignored.
    - There is already code for it, it's just commented out. https://developer.blender.org/T48001
    - Nevermind, that code is stupid. What we need to do is to let add/delete operators communicate with the list.
    - I think I broke scrolling to active element when it's off screen, oops. 
    - Method 1: When adding operator to the UI, it should take the list as an optional parameter, and then ask the list to find out what should be the active index when adding or removing items from the list.
        - Pros: List UI doesn't change active index, only operator does.
        - Cons: Need to change the code for every occurence of lists with add/remove buttons, to pass the list into the operator.
    - TODO: 
    - Fix navigation with up/down arrows (Currently broken due to removed active index remapping, which must stay removed for the sorted delete fix to work).
    - When scrolling to an off-screen element, and it is above in the list compared to the previously active element, scroll it to the center of the list rather than just ensuring that it's on screen. This is useful when stepping upwards, you generally want to see where you're going, not just where you are.
        - Alternatively, stepping upwards should always leave the active element centered?
        - This might be a bad idea.
    - Expose hard-coded shortcuts to be customizable.
    - Add default shortcut to Enter key to open and edit the filter.
    - Adding new element should use the currently entered filter in the name, eg "Group + ui_layout.filter_name.
    - "filter_name" in the RNA should really be changed to "filter_text"

- ME? Shape key add button should add the shape key underneath the active one, instead of at the bottom, at least when relative shape keys are enabled.
- ME Relative/Absolute shape key system should be an enum toggle, not a checkbox, because it's changing between two unrelated behaviors rather than turning a behavior on and off. Based on discussion with William about changing 2D Falloff brush option to an enum.

- ME! Ctrl+G in pose mode to set bone groups should show a list with bone groups, instead of an int with the bone group index.
    - I implemented this into MetsTools. I don't think it would get approved for master because:
        - Armature bone groups and layers should be getting deprecated soonâ„¢ anyways.
        - There are no armature operators currently implemented in python.
        - We draw some properties that already exist(existing group colors), which goes against usual design.
        - When creating new group, the color preset selector is not consistent with the existing group preset selector, since the existing preset selector cannot be appended, because the bone group doesnt exist yet.

- BBone improvements
    - When BBone handle type is set to Automatic, let us still choose a handle target, and have it behave such that the changes the target would apply when the handle type is set to Tangent, are applied on top of the changes that are done currently when the handle type is Automatic, effectively allowing us to combine the two behaviors.
        - Gavrilov said this is not this simple. But I wish it was.
    - When BBone handle type is set to Automatic, the bbone splining should only affect the bone itself, the child's start handle, and the parent's end handle. This is currently not the case for roll, meaning if a BBone chain is set to Automatic, and any of the bones in the chain start rolling, the entire chain will start rolling.
        - If we wanted to keep this behavior as an option, we could have a new handle type enum.
- Auto-Normalize should never add weights to 0 weights. (I couldn't reproduce this though)
- Ctrl+0,1,2 to set subsurf levels should work in weight paint mode on the weight paint object.
- In the vertex weight panel in edit mode N panel, let us sort influences by weight instead of alphabetical.
- ME? Give me a PoseBone.constraints.clear() for the python API, to delete all constraints. There is already a bpy.ops operator for this.

VERY small things:
- It should be easier(I'm not even sure it's reliably possible at all) to set the inverse of Child Of constraint through python. Maybe move the code that finds the matrix to a utility function, expose that utility function to bpy?
- How come Normalize Vertex Group and Normalize All Vertex Groups are separate operators, whereas Clean Vertex Group and Clean All Vertex Groups is one operator?
- When clicking on the Toolbar, the tool should switch on mouse button press, not only after a full click(mouse release) - I often try to click too fast, and my mouse cursor is moved off the toolbar by the time I finish the click, therefore the tool doesn't change.

Defaults:
- Big one: Lock Object Modes should be disabled by default. It makes no sense to lock the entireity of weight paint mode behind a checkbox.
    Better yet though, weight paint mode should automatically give access to the armature's pose bones, instead of having to do a weird selection ritual for it.
    Since multiple armatures are technically supported(although not really), I guess there needs to be a selector in the UI.
- In the Normalize All Vertex Groups operator, Lock Active should be disabled by default.
- In Transformation constraints, the scale min/max values should all default to 1.
- All constraints transform space should default to Local Space. At least for bones, but probably for objects too.
- Local View should not focus the viewport camera




Big things:
- Constraints as nodes(Solver nodes), or in general a node-based rigging system, which can still be abstracted by the old constraint interface.
    - This could be prototyped as an extension of Animation Nodes?
    
    - Regular parenting relationship would be a part of this node tree.
    - I guess this would mean the output of the node tree can't be in Local Space, but it has to be in Pose Space? Not sure what's best here, maybe it should be an option.
    - Result of a constraint node doesn't have to be applied to the final transformation, it can just be used in some maths, or it can be partially applied to the transform.
    - The way they arrive at this result also doesn't have to be a black box. There could be atomic nodes that let you do simple vector, matrix and quaternion maths, and these Solver nodes could be built out of these atomic nodes. The Solver nodes would basically just be pre-created node groups, based on logic currently present in constraints.c.
    - Some things might need special atomic nodes, like IK and Armature constraint.
    - Physics bones?
    - What space is the output of this node tree in? Pose space, right?

- Granuralize bone transforms further in the dependency graph. Two bones should be able to aim at each other without a dependency cycle, since only their rotation is dependent on their location. But as far as they're concerned right now, their transforms are dependent on each other's transforms.
- Bone parenting should no longer strictly imply any sort of transformational relationship. The purpose of parenting bones would be reduced to purely organizational and 3rd party software compatibility purpose (From a data perspective, NOT from a user perspective). As far as the depsgraph should be concerned, a child is no longer guaranteed to be dependent on its parent.
        - This is because all parent-induced transformations should become explicit. This is already sort of the case, in a backwards way, via the "Inherit Location/Rotation/Scale" checkboxes. The behavior of these checkboxes would be replaced by nodes, which are set up automatically when a user parents a bone, as long as the "use_nodes" option on the bone is disabled, which it would be by default.

- Improved update call propgataion (don't propagate if value hasn't changed) https://developer.blender.org/T68740#791069

- Deprecate armature layers and bone groups and replace with a new system.

- Combining shape keys with a node system (I vaguely know what I mean by this but not really - think hundreds of corrective shape keys interacting with each other. It's currently set up with a bunch of drivers and it's super finicky.)
    - After some thinking, I think shape key values should be part of "mesh nodes" along with modifiers and potentially mesh operator nodes like extrude etc.
- Also let us control shape key values within the same node graph as bone constraints.
    - Bad idea probably.
- Let weights be a separate datablock from object data
    - The goal would be to allow for a workflow where a rigger links a character to their file and assigns weights to it, while the rest of the mesh stays linked, allowing a character artist to make changes to the shape of the mesh (as long as they don't change vertex IDs)
CoffeeRun TODO:
    Tombstone?
    Tablecloth?

CloudRigify TODO:
    Improve bone group system
        group_defs shouldn't just exist in the ether. It should be initialized empty, and rig elements can add their bone groups to it as needed.
        Similar thing with layers, but the issue with that is it should be rig-wide settings!!!
    Add option to make mechanism bones unselectable
    Continue implementation of CloudBoneRig
    Implement a quadruped limb rig, similar to Autumn's hind leg.
    
    Face!

    Small rig elements like thumb correctives.
    Drivers for bone rotation types?

Improvements:
    Extra spine(hip) deform bone?

    Would be nice to have rig-wide options, but not sure on how to implement. A rig on the root bone? Metarig doesn't even have a root bone right now.
        Adding stuff to the Rigify Buttons panel would be elegant. Straight up forking Rigify is also something worth considering I think. Having the freedom to mess around with the generator engine would give some needed extra freedom.
    Add more customizability by putting functionality under rig parameters. Allow the rig to be a lot simpler if it needs to be.

Code quality:
    Custom Property creation should be done in store_ui_data()
    BoneInfoContainer should be an iterable so we can do self.bone_infos instead of self.bone_infos.bones.
        .bone() function should be .ensure().
    Instead of declaring every function to the preparation stage, there should be only one or a few prepare_bones function that calls the other functions and passes the neccessary information between them.
        Functions should only rely on calling `self` when referring to things that were created before prepare_bones stage, such as in initialize or in add_params.
    More and smaller functions:
        Functions should be split up into bone creating functions, and the functions for the loop that calls those bone creating functions. There shouldn't be two of these loops in one function. This is to make it easy to customize a rig by subclassing it, if needed.
    We could use Rigify's neat constraint and driver adding logic, on top of what we already have. After all, we currently define constraints as just an arbitrary dictionary. Nothing is stopping us from passing that dictionary to the Rigify constraint maker function in rig_bones stage. Same idea with drivers?

Ideas:
    Should probably turn constraints into a class. At least it would let us more easily add drivers to them.
    I should implement a CollectionProperty-like class, for ID collections, similar to BoneInfoContainer.
    BoneInfo and other ID classes could perhaps live without all their values pre-assigned in __init__. The only ones that need to be pre-assigned are the ones that other things rely on, like how the length property relies on head and tail existing.
    I really need to make sure I can justify abstracting the entire set of blender rigging related datastructures... it feels really silly.

Forking Rigify:
    If I were to fork Rigify, what would I add or change?
    - Scale system for all rigs (so add this to BaseRig)
    - Ability to implement custom generators, and choose your generator type in the UI, which would then affect the rest of the UI (and allow for entire rig-wide settings).
    - Split the current generator into a SimpleGenerator and a RigifyGenerator, expose some options on the latter.
    - Do something with BoneInfo?
    - Fix syntax error in new_bone()...
    - A better system for bone groups.
CoffeeRun TODO:
    Make sure rigs can be generated after parameter refactor
        Infant
        Scarf

CloudRigify TODO:
    Would be nice if rig samples and metarigs could be loaded from a .blend file instead of code-based generation bs. For metarigs it seems easy. For rig samples, it might be tricky because we have to juggle object modes.
    Add rig samples
        spline_ik
            waiting on T74888, until that's fixed this rig doesn't work anyways.
        fk_chain
        chain
        bone
    Spine
        Arbitrary number of spine and neck bones
        IK/FK snapping? I'm guessing it's non-trivial, otherwise we would've done it.
        Transformation constraints on FK-C bones (maybe make this optional)
            Test if these can be overwritten by a cloud_bone rig.
    On CloudChainRig, the Sharp Sections parameter would be nice if it defaulted to True for limb rigs, but False for the spine rig... but I think there's no way to achieve this.
        We could have an ugly way to not draw that parameter from inherited classes, and then force the parameter to a value. But meh, why put in so much effort just to take away control?
            Well, it would make the rig easier to use... like, by a lot.0
    Arbitrary length IK chain rig (Would also need ability to have the pole vector in an arbitrary direction around the chain... or rather, determine the direction by looking at the curvature of the chain.)
        Params to turn FK chain into an IK chain?
    IK Fingers
    Spline IK like controls(the other two types) for bendy bones.
    CloudBoneRig: Option to copy all children of the bone as well. This would let us be lazy for a while and attach entire manually rigged components to the generated rig, which would be a nice plan B if the face generation doesn't become a thing.
    
    AnklePivot should be renamed to HeelPivot in the script and the rigs...
    Improve bone group system
        group_defs shouldn't just exist in the ether. It should be initialized empty, and rig elements can add their bone groups to it as needed.
        Similar thing with layers, but the issue with that is it should be rig-wide settings!!! Therefore built into the generator!
    Implement a quadruped limb rig, similar to Autumn's hind leg.
    
    Face!

    Drivers for bone rotation types?

Code quality:
    Replace all string format bs %s %d %f with f{} where makes sense.
    Replace all instances of pi with rad(180) or so.
    BoneInfoContainer should be an iterable so we can do self.bone_infos instead of self.bone_infos.bones.
        .bone() function should be .ensure().
    We could use Rigify's neat constraint and driver adding logic, on top of what we already have. After all, we currently define constraints as just an arbitrary dictionary. Nothing is stopping us from passing that dictionary to the Rigify constraint maker function in rig_bones stage. Same idea with drivers?
        Instead of using Driver abstraction or (type, data) tuples, try storing drivers and constraints in a way where we can use rigify's driver and constraint applying functions to apply them.
    Instead of declaring every function to the preparation stage, there should be only one or a few prepare_bones function that calls the other functions and passes the neccessary information between them.
        (In a perfect world) Functions should only rely on calling `self` when referring to things that were created before prepare_bones stage, such as in initialize or in add_params.
    More and smaller functions:
        Functions should be split up into bone creating functions, and the functions for the loop that calls those bone creating functions. There shouldn't be two of these loops in one function. This is to make it easy to customize a rig by subclassing it, if needed.

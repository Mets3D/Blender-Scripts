This is a WIP patch to improve how sorting and filtering functionality of UILists interacts with adding and removing the active element from the list.

Issues:
    - When search/sort UI is hidden, it is still taking effect. To me this feels wrong, and changing it would also help when it comes to adding elements to the list (See below).
    - When search/sort is active:
        - When removing the active element, the new active element can easily jump around or worse, be hidden.
        - Entering filter text can cause the active element to become hidden.
        - When adding a new element, it will be filtered out and also be hidden.
        - Move element up/down operators behave unpredictably.
        Having the active element hidden is bad because the user can click the delete operator and delete stuff that they don't even know they have selected.
    - When deleting items, the active element moves up the list rather than down, which doesn't let you look ahead very well if you're deleting many items.
    - When the active element becomes the index 0 element after a deletion, the delete button is disabled. This seems like a bug.
    - Alphabetical sorting and reverse sorting can be enabled at the same time, but their functionality does not combine. They should be an enum choice option, or be able to function at the same time.
    - When trying to move elements in the list with the move up/down operator, the result can be unpredictable when filtering is enabled. Not sure how to solve this just yet.
        Easy solution: Disable the buttons when sorting/filtering of any kind is happening.
        Interesting solution: Enable the buttons when the resulting behaviour won't be unexpected: ie, if the element above the active one is the same as it would be without filtering.
        Interesting solution part 2: When reverse sorting is enabled, flip the operators too.
        Mix solution: Disable buttons when reverse sorting, but enable when not reverse sorting and resulting behaviour won't be unexpected.

Proposed changes:
    The overall idea is to let the uiList struct store whatever the hell we need to store, in order to let operators and user input reliably interact with it. This is:
    - What element should become active on step up and step down?
    - What element should become active on delete?
    - Is the active element hidden by filtering?

    Removing elements:
        - Return the UIList to python from template_list() function, so we can access these values from python.
        - (TODO REST) Pass these values to the "remove x" operator buttons. (Requires adding a new optional parameter to all these remove functions, which I think is correct.)
        - The new active element after a deletion is now the one that was below the deleted one. (Unless there isn't one)
        - (TODO REST) The delete button is now disabled when the active element is hidden by a filter. (It is not disabled when the active element is simply scrolled off screen.)
    - (TODO) Search and filter should be disabled when the UI for them is disabled.
    Adding elements:
        - Solution 1: Simply disable the search and filter UI, and therefore its functionality, when the number of elements increases(this can be done directly in UIList code)
        - Solution 2: Use the filter text in the new name of the created element. (need to pass a new parameter to all the "add x" functions). For example, if the filter is "finger" the new Shape Key name would be "Key finger". 
    Stepping selection (Up/Down arrow keys):
        - (Done) Stepping up from the top now loops around to the bottom of the list. Same for the bottom.
        - (Done) When the active element is filtered out, stepping down will make the first displayed element active. Stepping up makes last active.
    Moving elements (up/down operator buttons):
        (Both of these are awkward)
        - Solution 1: Disable these when sorting/filtering is enabled (Once again, would love to do it through poll function, but can't.)
        - Solution 2: Disable search/filter when these are used





Small additions (separate task):
    - Search functionality is not discoverable enough imo. The arrow is too small and non-descript.
    - Stepping up and down in the list is hard coded to Up/down arrow keys. Would be nice to expose it as a customizable shortcut, imo. I'm not sure how complicated this is, though.
    - F2 to rename
    - Ctrl+F to search

Huge changes:
    - Separation between Selected & Active
    - Drag and drop ordering
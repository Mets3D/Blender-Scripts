This is a WIP patch to improve how sorting and filtering functionality of UILists interacts with adding and removing the active element from the list.

Issues:
    - When search/sort UI is hidden, it is still taking effect. To me this feels wrong, and changing it would also help when it comes to adding elements to the list (See below).
    - When search/sort is active:
        - When removing the active element, the new active element can easily jump around or worse, be hidden.
        - When adding a new element, it will be filtered out and also be hidden.
        Having the active element hidden is terrible and must always be avoided, since the user can click the delete operator and delete stuff that they don't even know they have selected.

Proposal:
    - Search and filter should be disabled when the UI for them is disabled.
    - Let UIList store what index is drawn before and after the currently active one. This is updated directly from the drawing code, so it will stay accurate even if searching and filtering functionality is changed.
    - (Bonus) The implementation of the stepping functionality can be greatly simplified, since we can remove the copy pasted sorting and filtering logic.
    
    Removing elements:
        - Return the UIList to python from template_list() function, so we can access these values from python.
        - Pass these values to the "remove x" operator buttons. (Requires adding a new optional parameter to all these remove functions, which I think is correct.)

    Adding elements:
        - Solution 1: Simply disable the search and filter UI, and therefore its functionality, when the number of elements increases(this can be done directly in UIList code)
        - Solution 2: Use the filter text in the new name of the created element. (need to pass a new parameter to all the "add x" functions). For example, if the filter is "finger" the new Shape Key name would be "Key finger". 











Small additions (separate task):
    - Search functionality is not discoverable enough imo. The arrow is too small and non-descript.
    - Stepping up and down in the list is hard coded to Up/down arrow keys. Would be nice to expose it as a customizable shortcut, imo. I'm not sure how complicated this is, though.
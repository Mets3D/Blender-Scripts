PabloDobarro told me to kick someone around here to implement T84520
	I kicked Sebastian to ask if he's up for it.
	He told me to kick Francesco to ask if this can go on Sebastian's list.
	I kicked Francesco.

Ellie
	Bring in new eyebrow mesh
	Bring in ALL the meshes!

Need to come up with more foolproof symmetry workflow. Right now if I break weight paint symmetry by accident, I'm fucked.

Figure out how to rig a bird!
	Needs to open and close its wings and not look shit in both poses
	The wing is extremely close to the head and there is effectively no neck, but the head needs to rotate a lot.

Expand functionality of "Keyframe All" operator to include custom properties not on the main properties bone...
Move the "Teeth Follow Mouth" option to the rig settings instead of Character settings.

Would be incredible to have a toggle that switches between hiding/unhiding the generated and the meta rig.

Camera Lattice:
	Idea?
		Generate an armature rig for the lattice, so the guys are animating bones instead of shape key values.
	Add button to resync objects of a camera lattice
Tweak Lattice:
	Allow changing parenting without the tweak lattice flying away.

Update Pablo's animation layers addon so it supports overrides.

Sprites:
	https://docs.google.com/spreadsheets/d/1I6sVPwdcoB9gdht9Zqdl4kx7EKbYgqyb9I6EFUdJO3E/edit#gid=1265024552

	- Re-generate all characters with eye targets far from each other. (Flatten X turned OFF)

	Rex:
		- Make flat eye lines darker and less specular in viewport

		Add toggle-able automation to the watch.
		put bendy bone segments on the shoulder so it can be noodled.
			Maybe add auto-shoulder-noodling tech in the form of some Transformation constraints so that when the upperarm is rotated downward, the STR bone translates down and rotates to make a noodly shoulder.

	Ellie
		- add "IK" head control
			- Make neck bendy bone and connected
			- Add an extra head control that is parented to the chest but displays at the head. When rotated, the neck and head both rotate a bit.

	Everyone (Rik mentioned for Victoria, but it's for everyone):
		metacarpals:
			Fingers spread control (also include thumb here)
			arcing of the knuckles
				This thing https://i.imgur.com/wEVwNWt.png (also twist them a bit)
			probably with actions

CloudRig TODO:
	Priority 0: Requested
	Priority 1: New features
		Parent Switching (May be implemened differently for each rig):
			Implement root bone custom parenting in a bunch of rigs.
		Constraint Relinking (This may be implemented differently for each rig)
			cloud_chain should override relink() to push constraints and drivers to main STR bones (minus cap control)
				Some rig assignments on metarigs no longer need to be cloud_face_chain (like Jay's chain)
			cloud_fk_chain should override relink() to push constraints and drivers to FK bones.
				Child classes of this probably don't override it further.

		(Requested) cloud_leg should have a new foot roll parameter called "secondary activation angle" or something better, which can be adjusted to improve behaviour for high heels, ie. the second bone's rotation will trigger sooner.
		Active layers on the generated rig shouldn't be the same as the metarig afterall - or maybe it should be an option (sometimes we do enable the deform layer because we want to see it on generation)
		Perhaps some parameters could belong all the way up in CloudBaseRig.
			- Create ORG bones (False by default, can force to True for rigs that need it)
			- UI row and column names...?
	Priority 2: Bugs
		cloud_aim ORG bone use_deform is copied from the metarig, but it should always be False!

		Various IK related features *probably* currently only work in certain orientations... Need to list them, test them and fix them:
			- IK/FK snapping
			- AutoRubberHose control roll angle
	Priority 3: Changes that will affect metarigs
	Priority 4: Code quality
		Uses of the variable `org_parent` are currently satanic. Should either be avoided, or made uniform, so all BoneInfo instances have an `org_parent` or have a dictionary that keeps track of that relationship. (latter is better I think, can probably be used in other cases)
		Other satanic variables:
			org_bone.def_bones
		
		Find better way to define and reference bone sets instead of slapping on new properties in ensure_bone_sets(), that's hard to follow.
		I guess I wouldn't mind an enum class in each rig's file, like
		class BoneSets:
			DEF = BoneSet()
		but idk if that could work.

		It sucks that define_bone_sets() and ensure_bone_sets() are always so far away from each other, and even just the fact that they both have to exist irks me a lot.
			The reason they both have to exist is because we want to assign them to self, but honestly that's probably not even a good thing to do.
			We could instead maybe have a self.bone_sets[] that's automatically populated based on class information on initialize(), and then accessed as strings, eg.
			instead of self.def_chain it'd be self.bone_sets['DEF']. We could make our own class BoneSets(dict) if we want to execute custom code on keyword access.
			All of this existed before but was deemed clunky - maybe it wasn't.
		I also hate the "enum" cls.default_layers. it's basically just an immutable dictionary, it's lame af. Would rather just have a class with mutable class vars, ie.
		class DefaultLayers:
			IK = 16
		and then just import that everywhere. Or cls.DefaultLayers.IK. Can we put a class within a class?

		Bring up to date how we pass armature constraints to make_constraint() (D9092)
			This will break backwards comp though, so should create a tag accordingly.
		Remove parentheses from if() (search for `if(`)
		use reparent_bone() in more places. All sorts of places! (ie. root bone of every rig, including cloud_bone)
		Try splitting up cloud_bone into cloud_tweak and cloud_copy.
		cloud_base should define a deformation bone set and every rig should just use that one.
	Priority 5: UI, UX & documentation
		Relink Constraints never really needs to be disabled. I know we had a philosophy before of "Add useless checkboxes so we can have useful tooltips" but eh, icky.
			If we keep the checkbox, it should also disable relinking on cloud_tweak and cloud_bone (and be documented as such, ie. it doesn't have to be mentioned explicitly)
		Version, clean up and test the metarigs.
			Add Rex metarig with the non-bendy-bone face? No shrinkwrap.
		Explain the face set-ups on Sintel and Rex metarigs.
		Add operators in the UI somewhere, somehow.
			Would be nicer to upstream most of these instead.
		Hidden layers shouldn't be set by starting them with a dollar$ign but instead with an eye icon... Not sure if easily possible though since we'd have to hack into the rigify layers propertygroup which I don't want to do.
		Using a UIList for BoneSets would be great but I tried and it seemed impossible to do it in a nice enough way.
	Priority 6: Rigify compatibility
		When enabled, bone groups assigned in cloud_bone seem to get overwritten.
		Rigify compatibility specific functions should only affect rigify rig types.

CloudRig ideas:
	Rigs:
		Try implementing the full body IK systems from angavrilov?

		cloud_finger
			Would extend IK chain, but rotating the IK control would sort of bend the finger somehow, or something.
			Param for useless curl controls
			I'm thinking several fingers could come together into a palm, but maybe that should just be an Action constraint type of deal.
		cloud_instance
			This would be a single bone rig with a single parameter, which is another bone from the metarig which has a rigify type.
			This bone would act as an instance of that entire rig element, copying all its child rigs and everything. Crazy stuff. Not sure if possible.
			But wait, the hard part of this is name conflicts. Bone names have to be unique, obviously, but if you just copy over all the bones... hmm... more parameters to handle name replacement? probably a similar deal to the batch rename tool. weird stuff.
		cloud_ik_chain
			Add display helpers for IK master controls. This display helper should stick to the end of the IK chain when IK stretch is disabled. This is so that the IK control doesn't get lost.

	Bone Sets
		Instead of having 3 checkboxes on the generator level for overriding DEF/MCH/ORG assignments,
		it would be better to have those checkboxes on the individual rig parameters. Then, when those checkboxes are enabled, we draw the generator override layers grayed out, and when disabled, we draw the rig parameter layers normally.
		Documentation for this would need an update too.
		It would be amazing if both Bone Sets and BoneInfo stuff was something outside of CloudBaseRig, such that one could just take those files and import them in a regular Rigify rig or their own featureset. But idk if it would really be possible since they rely on modified generator code...

	Actions:
		When adding a new Rigify Action, it should duplicate the data of the previously active one.
		Button to automatically set the Action frame range
			For this the Frame Start/End UI could be collapsed into a single row, "Frame Range", displaying the start/end numbers next to each other, with the automatic setting operator on the far right.
		Add Rigify Log warnings when a frame range is an odd number, or a curve is missing a keyframe in the center frame.
		Add Rigify Log warnings for curves on bones that no longer exist.
		Maybe warn for curve handles that are set to something other than Linear? Not sure about this.

	Customizing bone shapes would be pretty neat.
		I'm thinking an enum dropdown where we list out all the available widget names from Widgets.blend.
		I'm thinking a Bone Shapes parameter section underneath Bone Sets.
		What are the use cases for this currently? Feel like it's not that many. Pretty much FK and STR. Might be better not to overthink this one and just add an enum to cloud_chain between sphere or cube.

	Manage bone rotation modes better - Currently we set everything to an arbitrary rotation mode, I think? We should probably copy the rotation mode from the metarig.
		Perhaps all this needs to be is the classic custom property+driver to let anyone change the rotation mode on the fly for bones that could require it. (shoulders, wrists, thighs, feets)

	Bring back BoolProperties? Issue is animating them works badly. (doesn't work) because they rely on the update callback which is not called when changed by a keyframe.

Rigify patch ideas
	Make a huge (probably nested) design proposal on Phabricator about Rigify improvements that I'd like to implement (including many CloudRig features)

	Bugs
		super_palm seems to parent to the wrong bone when its parent rig has Limb Segments==1.

	Code Quality
		Strip out the entire rot_mode.py into a separate addon. It has nothing to do with Rigify!
			Do this after D9096.
		Rename ORG bones before joining duplicated metarig into generated rig. Justification is that drivers that were targetting non-ORG bones don't get mis-targeted this way.
			Rigify already worked around this by messing up such drivers' targets, and then un-messing them up later, but to me that seems unneccessarily convoluted.
		There is a lot of random shit in rigify/ui.py, eg. tons of IK/FK operators and whatever else. It's used code, but it doesn't belong in a file named "ui.py"!!
		- Bunch of rig types (at least in Legacy) redefine each others' parameters... not good.

	Architecture
		Rework the way parameters are registered, there is a lot of hacking around going on now, eg. __init__->ParameterValidator.
			Every rig type should have its own namespace so it can't possibly ever conflict with another rig type. Having to worry about avoiding these conflicts is annoying.
			This means every rig type should have its own PropertyGroup.
			How does inheritance work with that? I don't think it does... frick.

		Set up a centralized way of downloading feature sets for Rigify. 
			Ideally, feature set maintainers wouldn't have to get commit rights to the addons repo, and wouldn't have to work in the addons repo.
			Add built-in "dummy" entries to the FeatureSetList feature added in D8519.
			Candidates:
				https://gitlab.com/lfs.coop/blender/rigify-pantins
				https://docs.blender.org/manual/en/dev/addons/rigging/rigify/feature_sets.html
					https://github.com/cessen/cessen_rigify_ext
					https://github.com/angavrilov/angavrilov-rigs

	UI
		- Searchable Operators (D9094)
		Rigify Buttons
			- Get rid of Advanced Options toggle, Overwrite/New enum, utterly useless, adds clutter.
			- Single Column layout
		Rigify Layer Names
			- Add a preview
			- Further improvements can only be made if the BoneSet feature is added to all rig elements:
				- Bone Group selection becomes irrelevant and can be removed.
				- DEF/MCH/ORG no longer needs to be hardcoded.
		Rigify Bone Groups
			- Unified Selected/Active colors should get the same layout as on CloudRig.
			- rigify_use_standard_colors() and rigify_apply_selection_colors() can be nuked.
			- When Unified checkbox is enabled, the relevant code should use those color selectors instead of of the rigify_color that's being iterated over.
			- rigify_theme_to_add should be a parameter shown in a pop-up window of rigify_bone_group_add_theme() operator.
			- Add/Remove icons should have plus and minus icons instead of zoom in/zoom out icons...
			- 

	Features
		Rig samples should spawn at cursor instead of object origin.
		entire mechanism.py contains no reference to id_type. This means Single Property drivers can only ever be referencing Object datablocks.
			Should get a use case before I go fixing this.
		driver_add() should not be allowed to halt generation with a useless error message, such as when the data path is invalid. It should just throw a big ol' warning and skip that driver.
			In general, better error reporting would be great.
		From CloudRig: 
			The ultimate long term goal would be that we should be able to remove the CloudGenerator class without any compromises. This would require upstreaming lots of functionality, without stepping on any toes.
			Add bbone scale drivers for BBones(maybe as parameter) for all chain rigs.

			Add all my operators.
				Waiting for D9094 first.
			Add scale management so it doesn't generate like shit at small or large scales.
			Give BBone scale the same significance as in CloudRig.
			Rework widget management - only use procedural generation when it makes sense, otherwise load from file. Stop making a unique object for every bone, re-use existing instead.

			Add more GeneratorParameters to disable currently hardcoded functionality.
				Add warning to Force Widgets Update that it is slow as shit.

			Rework the bone group system to be like mine.
				Actually, rigify/utils/layers.py implements a class that reminds me a lot of BoneSet, just calls it ControlLayersOption. Interesting.

Addon Ideas
	Local Shape Keys
		An extension or alteration of the pipeline addon to allow localizing objects, adding shape keys to them, but then still pulling in data from upstream.

		I think overridden objects are aware of the library they are overriding, and can be made local. So the addon would detect whether it's overriding, and provide its own Make Local operator that does some extra stuff, such as, saving a reference to the library that we are linking from.
		Then, on such local objects, we display a button to update from upstream. This will update any selected objects that have the addon's data (ie. library to link from).
		The object's name must not change, as it will be used to match the datablock.

		So, when the button is pressed, all compatible objects are renamed with a suffix. The objects with the same names are appended from their relevant libraries.
		A dictionary is created to map the objects.
		Method 1:
			The data from the linked objects is transferred to the local objects. (Maybe the linked objects need to be made local again for some of this transferring to work? Hopefully not)
			The linked objects are deleted
		Method 2:
			The linked object is made local again. So actually we would just be appending at that point.
			The shape keys on the local object that don't exist on the linked object are transferred over, along with any keyframes and even drivers.
			The old object with the suffix is deleted.
			If there was a change in vertex order, this will of course fail miserably.
	
		A different approach
			Maybe shape keys can be added and authored through python only. In this case, we could just have the local object hold the shape keys, which are transferred to the override object on file load. Would be slow as shit though.

	Zenimator / Blender Animation Studio Onboarding Addon (not as catchy)
		As I will have 7 animators with probably a varying degree of understanding of Blender, it would be nice to have an addon that makes Blender not shit.
		- Purge unused data on file load to avoid missing library errors
		- Reload and Resync libraries on file load so they don't have to do it manually and harass me about it all the fucking time
		- Save and load Selection Sets to/from text datablocks
		- Disable curve name color user preference
		- Set all newly created Actions to use fake user
		- If new text datablocks are added and they have Register enabled, run them.
		- If a text datablock has Register enabled but doesn't end in .py, still run it!
		- Prevent saving a file when there are broken library links, as this can result in lost data.
		- Set Simplify max subdivs to 0.
		- Maybe enable Simplify on file load?
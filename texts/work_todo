Currently working on: All bones should be created with self.new_bonei() then find a better name for it, then add duplicate name checking and whatnot. Also, all BoneInfo's should be added to a master list in the generator.


Bug reports:
	- Putting a driver on data.bones["Bone"].bbone_scaleoutx and such bbone scale values doesn't affect the pose deformation being applied to the meshes. This value effectively acts as a bbone display size - which actually sort of makes sense. What's strange though, is that drivers on the curve values behaves identical as if they were on the pose bone properties.
		Fixing this would totally break Rigify, because it relies on this bug...

Pablo TODO:
	- Make an operator that mirrors a bone's transforms to the opposite bone, around an arbitrary bone as the mirror axis.
	- Try to implement a brute force method of more precise IK->FK snapping with pole target.

Tutorial ideas:
	Developing your own Rigify feature set
		How to set up file structure, how to name classes, etc.
		Explain generation stages

Rigify patch ideas
	Documentation is probably out of date as hell. For example, https://docs.blender.org/manual/en/dev/addons/rigging/rigify/basics.html#library-linking is still talking about groups, a la 2.79.
	rig_ui.py should be saved in a custom property rather than weird driver magic
		https://developer.blender.org/T79833 - bone roll for fingers should probably be set to manual X instead of automatic.

	There is a lot of random shit in rigify/ui.py, eg. tons of IK/FK operators and whatever else.

	Rework the way parameters are registered, there is a lot of hacking around going on now, eg. __init__->ParameterValidator.
		Every rig type should have its own namespace so it can't possibly ever conflict with another rig type. Having to worry about avoiding these conflicts is annoying.
			This means every rig type should have its own PropertyGroup.
				How does inheritance work with that? I don't think it does... frick.

	Think of how we could set up a centralized way of downloading feature sets for Rigify. Ideally, feature set maintainers wouldn't have to get commit rights to the addons repo, and wouldn't have to work in the addons repo.
		Maybe Rigify could just have a list of repository URLs and be able to pull from them at the click of a button? Is that insane?
		That would also mean being able to update your feature set at the click of a button. It sounds pretty damn good, but idk. Maybe complicated. Maybe not secure. Etc.
			Simpler: These community-maintained feature sets would simply have a button with a link to them in the feature set UI. When they are installed, the "Download" button is replaced by the "Remove" button - but there is no one-click download from Blender. We just give you the link, you have to download and install the feature set.

	Improve the UI where feature sets are installed, particularly the way they are listed - their titles are so close to each other and don't look like titles.

	Link things to the blender manual
	Add user-facing operators to the UI, somewhere.

	entire mechanism.py contains no reference to id_type. This means Single Property drivers can only ever be referencing Object datablocks.
	driver_add() should not be allowed to halt generation with a useless error message, such as when the data path is invalid. It should just throw a big ol' warning and skip that driver.
		In general, better error reporting would be great.

	- Bunch of rig types (at least in Legacy) redefine each others' parameters... not good.
		That's not to say we should prefix every parameter name with a rig type identifier.
		Should find out if it's possible to avoid them conflicting in the first plce.
			Idea: Instead of passing bpy.types.Armature.rigify_params to the functions' `params` arg, rigify_params should become a PropertyGroup of PropertyGroups (ie. a CollectionProperty of type PropertyGroup?) So we can add groups of properties - and each container's name would be the name of the... class? python file name? oof. Not sure on that one. Default to python file name, unless somehow specified?
		Then if it's possible, ask Alexander why rig parameters are stored in the class. It really makes no sense, and it's clear to see why imo.
		- There's some spam in the console when using legacy mode, spawning a pitchipoy rig, and fiddling with rig types.
			I think this should be tackled along with reworking the way rig parameters work. (No longer store in rig class, the relating code seems super messy anyways)

	Add support for make_constraints for Armature constraints and the targets{} dict.
	Move rigify properties into a propertygroup? Would break any code that interacts with Rigify, and not serve enough purpose... but an idea.

	From CloudRig: 
		The ultimate long term goal would be that we should be able to remove the CloudGenerator class without any compromises. This would require upstreaming lots of functionality, without stepping on any toes.
		Add bbone scale drivers for BBones(maybe as parameter) for all chain rigs.
		add copy_property from cloud_utils to rigify.
		add copy_driver() from cloud_utils to mechanism.py, and use it from the legacy code that copies drivers.

		Add all my operators.
		Add scale management so it doesn't generate like shit at small or large scales.
		Give BBone scale the same significance as in CloudRig.
		Rework widget management - only use procedural generation when it makes sense, otherwise load from file. Stop making a unique object for every bone, re-use existing instead.

	Rename ORG bones before joining duplicated metarig into generated rig. Justification is that drivers that were targetting non-ORG bones don't get mis-targeted this way.
		Rigify already worked around this by messing up such drivers' targets, and then un-messing them up later, but to me that seems unneccessarily convoluted.

	Add more GeneratorParameters to disable currently hardcoded functionality.
		Add warning to Force Widgets Update that it is slow as shit.

	Rework the bone group system to be like mine.
		Actually, rigify/utils/layers.py implements a class that reminds me a lot of BoneSet, just calls it ControlLayersOption. Interesting.

Addon idea:
	Make a better Shift+D (duplicate bone) behaviour, where instead of slamming a .001 at the end of the bone name, it increments whatever number it finds in the bone name, and it does the same on the right side.
	Make a Straighten Bone Chain operator for armature edit mode, to straighten IK chains - Head and tail of the chain wouldn't move, eveything in between gets redistributed to the same length ratios as before along a perfectly straight line.

Settlers TODO:
	Phileas:
		- His mouth bones are named with the wrong sides, and was released that way in V1, yikes!
	Lunte:
		- Add new masking tech to the teeth, rename bones.
		- Teeth names could use some love, but then gotta run the curve renaming script on everything again.
		- Eye names aren't symmetrical - do it like gabby. I think the right eye's curves should be scaled -1 in edit mode, maybe?

CloudRig ideas:
	Try implementing the full body IK systems from angavrilov?

	cloud_finger
		Would extend IK chain, but rotating the IK control would sort of bend the finger somehow, or something.
		Param for useless curl controls
	cloud_instance
		This would be a single bone rig with a single parameter, which is another bone from the metarig which has a rigify type.
		This bone would act as an instance of that entire rig element, copying all its child rigs and everything. Crazy stuff. Not sure if possible.
		But wait, the hard part of this is name conflicts. Bone names have to be unique, obviously, but if you just copy over all the bones... hmm... more parameters to handle name replacement? probably a similar deal to the batch rename tool. weird stuff.

	Bone Sets
		Instead of having 3 checkboxes on the generator level for overriding DEF/MCH/ORG assignments,
		it would be better to have those checkboxes on the individual rig parameters. Then, when those checkboxes are enabled, we draw the generator override layers grayed out, and when disabled, we draw the rig parameter layers normally.
		Documentation for this would need an update too.

	It would be amazing if both Bone Sets and BoneInfo stuff was something outside of CloudBaseRig, such that one could just take those files and import them in a regular Rigify rig or their own featureset. But idk if it would really be possible since they rely on modified generator code...

	Customizing bone shapes would be pretty neat.
		I'm thinking an enum dropdown where we list out all the available widget names from Widgets.blend.
		I'm thinking a Bone Shapes parameter section underneath Bone Sets.
		What are the use cases for this currently? Feel like it's not that many. Pretty much FK and STR. Might be better not to overthink this one and just add an enum to cloud_chain between sphere or cube.

	Manage bone rotation modes better - Currently we set everything to an arbitrary rotation mode, I think? We should probably copy the rotation mode from the metarig.
		Perhaps all this needs to be is the classic custom property+driver to let anyone change the rotation mode on the fly for bones that could require it. (shoulders, wrists, thighs, feets)

	Generator parameter: Show Warnings
		When enabled, this will add a custom property to the rig data, to indicate to the UI script to add a new panel to the Properties Editor.
		This panel would be called CloudRig Log. It would read warnings and errors from the rig data, where it is written to from generation-time.
	
	Bring back BoolProperties? Issue is animating them works badly. (doesn't work) because they rely on the update callback which is not called when changed by a keyframe.

	Picker UI? based on https://github.com/jayanam/bl_ui_widgets. Would be quite a big endeavour, and I don't hear a lot of people asking for it.

CloudRig TODO:
	Priority 0: Requested features
	Priority 1: Face rigging features
		Jaw rig: Specify any number of cloud_face_chain rigs, and the controls of these would be automagically parented between the jaw and the jaw's parent (expected to be the head) with some sort of influence gradient. Could really use a custom widget though.
	Priority 2: Changes that will affect metarigs
		Try splitting up cloud_bone into cloud_tweak and cloud_copy.
	Priority 3: Bugs
		When disabling final control on the cloud_human spine, the last DEF bone isn't parented to the last STR bone, and the neck doesn't get connected properly either.
	Priority 4: Code quality
		cloud_base should define a deformation bone set and every rig should just use that one.
	Priority 5: UI, UX & documentation
		Add operators in the UI somewhere, somehow.
		Add gifs to CloudRig Types page (do it at home with ShareX)
		Hidden layers shouldn't be set by starting them with a dollar$ign but instead with an eye icon... Not sure if easily possible though since we'd have to hack into the rigify layers propertygroup which I don't want to do.
		Using a UIList for BoneSets would be great but I tried and it seemed impossible to do it in a nice enough way.
		Add a template for reporting issues - only important when we go wide public, so probably after Sprites. https://gitlab.com/help/user/project/description_templates
	Priority 6: Rigify compatibility
		When enabled, bone groups assigned in cloud_bone seem to get overwritten.
		Rigify compatibility specific functions should only affect rigify rig types.
	Priority 7: Upstream fixes and features to Rigify.
		Get these patches approved and committed
			D8496 D8514 D8519 D8524
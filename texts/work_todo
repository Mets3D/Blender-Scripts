I should configure my VSC properly; strip trailing whitespace on save, auto-format C code on save, maybe Python too if possible, but I'm not sure if it is.

Bug reports:
	- Putting a driver on data.bones["Bone"].bbone_scaleoutx and such bbone scale values doesn't affect the pose deformation being applied to the meshes. This value effectively acts as a bbone display size - which actually sort of makes sense. What's strange though, is that drivers on the curve values behaves identical as if they were on the pose bone properties.
		Fixing this would totally break Rigify, because it relies on this bug...

Pablo TODO:
	- Make an operator that mirrors a bone's transforms to the opposite bone, around an arbitrary bone as the mirror axis.
	- Try to implement a brute force method of more precise IK->FK snapping with pole target.

Tutorial ideas:
	Developing your own Rigify feature set
		How to set up file structure, how to name classes, etc.
		Explain generation stages

Rigify patch ideas
	Rework the way parameters are registered, there is a lot of hacking around going on now, eg. __init__->ParameterValidator.
		Every rig type should have its own namespace so it can't possibly ever conflict with another rig type. Having to worry about avoiding these conflicts is annoying.
			This means every rig type should have its own PropertyGroup.
				How does inheritance work with that? I don't think it does... frick.

	Think of how we could set up a centralized way of downloading feature sets for Rigify. Ideally, feature set maintainers wouldn't have to get commit rights to the addons repo, and wouldn't have to work in the addons repo.
		Maybe Rigify could just have a list of repository URLs and be able to pull from them at the click of a button? Is that insane?
		That would also mean being able to update your feature set at the click of a button. It sounds pretty damn good, but idk. Maybe complicated. Maybe not secure. Etc.
			Simpler: These community-maintained feature sets would simply have a button with a link to them in the feature set UI. When they are installed, the "Download" button is replaced by the "Remove" button - but there is no one-click download from Blender. We just give you the link, you have to download and install the feature set.

	- T78463
	Implement the unguligrade rear_paw rig type, update metarigs accordingly.
		T78463#972205
	
	Improve the UI where feature sets are installed, particularly the way they are listed - their titles are so close to each other and don't look like titles.

	Link things to the blender manual
	Add user-facing operators to the UI, somewhere.

	utils/naming/org_name function definition is redundant, the docstrings for some of the surrounding functions are wrong.

	entire mechanism.py contains no reference to id_type. This means Single Property drivers can only ever be referencing Object datablocks. This is terrible.
	driver_add() should not be allowed to halt generation with a useless error message, such as when the data path is invalid. It should just throw a big ol' warning and skip that driver.
		In general, better error reporting would be great.

	- Bunch of rig types (at least in Legacy) redefine each others' parameters... not good.
		That's not to say we should prefix every parameter name with a rig type identifier.
		Should find out if it's possible to avoid them conflicting in the first plce.
			Idea: Instead of passing bpy.types.Armature.rigify_params to the functions' `params` arg, rigify_params should become a PropertyGroup of PropertyGroups (ie. a CollectionProperty of type PropertyGroup?) So we can add groups of properties - and each container's name would be the name of the... class? python file name? oof. Not sure on that one. Default to python file name, unless somehow specified?
		Then if it's possible, ask Alexander why rig parameters are stored in the class. It really makes no sense, and it's clear to see why imo.
		- There's some spam in the console when using legacy mode, spawning a pitchipoy rig, and fiddling with rig types.
			I think this should be tackled along with reworking the way rig parameters work. (No longer store in rig class, the relating code seems super messy anyways)

	rigs/experimental/super_eye.py is empty.
	rigs/rear_paw.py is virtually empty? Is it just to have a different rig sample for the same rig? Seems like the wrong way to go about that.

	Add support for make_constraints for Armature constraints and the targets{} dict.
	Move rigify properties into a propertygroup? Would break any code that interacts with Rigify, and not serve enough purpose... but an idea.

	From CloudRig: 
		Add bbone scale drivers for BBones(maybe as parameter) for all chain rigs.
		add copy_property from cloud_utils to rigify.
		add copy_driver() from cloud_utils to mechanism.py, and use it from the legacy code that copies drivers.

		Add all my operators.
		Add scale management so it doesn't generate like shit at small or large scales.
		Give BBone scale the same significance as in CloudRig.
		Rework widget management - only use procedural generation when it makes sense, otherwise load from file. Stop making a unique object for every bone, re-use existing instead.

	Rename ORG bones before joining duplicated metarig into generated rig. Justification is that drivers that were targetting non-ORG bones don't get mis-targeted this way.
		Rigify already worked around this by messing up such drivers' targets, and then un-messing them up later, but to me that seems unneccessarily convoluted.

	Add more GeneratorParameters to disable currently hardcoded functionality.
		Add warning to Force Widgets Update that it is slow as shit.

	Rework the bone group system to be like mine.
	As an even longer term goal, make it so that I don't have to implement my own Generator class, because the rigify generator should be able to do everything I need it to do.

BBone Face Rig idea:
	What if there are two layers of BBones? One is Automatic, the other is Tangent.
	We then steal the tangents of the Automatic with Copy Transforms constraints that have splining enabled.
	meh, you still need two bones to do translation+rotation separately methinks.
	Control
		Automatic chain
			Automatic angle reader
				Tangent angle (parented)
	In this setup, how do we get the local rotation of Control to affect Tangent angle in a predictable way?

Next Rig notes:
	- Four lip controls per quarter of lip instead of 3.

Addon idea:
	Make a better Shift+D (duplicate bone) behaviour, where instead of slamming a .001 at the end of the bone name, it increments whatever number it finds in the bone name, and it does the same on the right side.
	Make a Straighten Bone Chain operator for armature edit mode, to straighten IK chains - Head and tail of the chain wouldn't move, eveything in between gets redistributed to the same length ratios as before along a perfectly straight line.

Settlers TODO:
	Phileas:
		- His mouth bones are named with the wrong sides, and was released that way in V1, yikes!
	Lunte:
		- Add new masking tech to the teeth, rename bones.
		- Teeth names could use some love, but then gotta run the curve renaming script on everything again.
		- Eye names aren't symmetrical - do it like gabby. I think the right eye's curves should be scaled -1 in edit mode, maybe?

CloudRig ideas:
	IK Fingers
		Would extend IK chain, but rotating the IK control would sort of bend the finger somehow, or something.
		Param for useless curl controls
	cloud_ik_chain
		IK chains in blender are expected to be perfectly flat along a plane. I'm thinking maybe we could add an operator to the rig settings that would do this for you??
	cloud_instance
		This would be a single bone rig with a single parameter, which is another bone from the metarig which has a rigify type.
		This bone would act as an instance of that entire rig element, copying all its child rigs and everything. Crazy stuff. Not sure if possible.
		But wait, the hard part of this is name conflicts. Bone names have to be unique, obviously, but if you just copy over all the bones... hmm... more parameters to handle name replacement? probably a similar deal to the batch rename tool. weird stuff.

	Customizing bone shapes would be pretty neat.
		I'm thinking an enum dropdown where we list out all the available widget names from Widgets.blend.
		I'm thinking a Bone Shapes parameter section underneath Bone Sets.
		What are the use cases for this currently? Feel like it's not that many. Pretty much FK and STR. Might be better not to overthink this one and just add an enum to cloud_chain between sphere or cube.

	Manage bone rotation modes better - Currently we set everything to an arbitrary rotation mode, I think? We should probably copy the rotation mode from the metarig.
		Perhaps all this needs to be is the classic custom property+driver to let anyone change the rotation mode on the fly for bones that could require it. (shoulders, wrists, thighs, feets)

	Generator parameter: Show Warnings
		When enabled, this will add a custom property to the rig data, to indicate to the UI script to add a new panel to the Properties Editor.
		This panel would be called CloudRig Log. It would read warnings and errors from the rig data, where it is written to from generation-time.
	
	Bring back BoolProperties? Issue is animating them works badly. (doesn't work) because they rely on the update callback which is not called when changed by a keyframe.
	Layers: Show a preview of what the layer UI is going to look like. This should be super easy, we just need to call the function that draws the actual layer UI. We can import cloudrig.py, why not.

	Would be nice if rig samples could be loaded from a .blend file instead of code-based generation bs. For metarigs it seems easy. For rig samples, it might be tricky because we have to juggle object modes.

	Picker UI? based on https://github.com/jayanam/bl_ui_widgets. Would be quite a big endeavour, and I don't hear a lot of people asking for it.

CloudRig TODO:
	Rigify compatibility
		- When enabled, cloud_bones with use_deform=True get overwritten to False.
		- When enabled, bone groups assigned in cloud_bone seem to get overwritten.
		Rigify compatibility specific functions should only affect rigify rig types.

	Bug: IK-CTR-Chest flies away when moving the chest master far, needs a DSP- bone?

	Documentation:
		Add gifs to CloudRig Types page (do it at home with ShareX)
		- Put something on the home page? Hell it could be just a duplicate of the readme, or a re-listing of what's already in the sidebar, idk.
		- Update readme with links to the wiki and more up-to-date screenshots.

	IK Chain
		Ability to have IK control at the end
	FK Chain
		Counter-Rotate STR param should disable the deform_segments chain param, and force it to 1.
	Spine
		Maybe should be split up to Spine/Neck/Head rigs. Or well, just remove the neck and head, and those should be separate FK chain rigs. Might make the code a lot simpler, but also might not.
		IK-CTR-Spine should have a copy rotation constraint to MSTR-Hips and possibly also MSTR-Chest. Ofc, implement this in a smart way, that works with arbitrary spine length. (Similar deal to how STR bones stay inbetween STR main bones, but in this case it's rotation instead of location)
		IMPORTANT: Should force chain segments to 1.
		IK/FK snapping? I'm guessing it's non-trivial, otherwise we would've done it. But it should be possible.
		Transformation constraints on FK-C bones (maybe make this optional)
			Their values would probably have to be dependent on the length of the bone. Ie, a long bone should slide more when it's rotated, compared to a short bone.
			Test if these can be overwritten by a cloud_bone rig.
	IK limbs
		feet control shouldn't be forced onto the floor, maybe based on an option, or use anklepivot bone, or whatever.
		ROLL-Foot.L shouldn't have its tail be offset in a flat forward direction. Instead, make it perpendicular to the knee, pointing towards the toe. (cross product of knee and toe bones' vectors?)
		Some smartypants way of ensuring that the IK pole, when IK Pole Follow is enabled, follows the IK control on its roll axis, but not the other axes?
		Scissor limb rig possible? (limb with an extra bone to help elbow/knee deformation) - Can it work in FK?
			I guess this would have to manifest more like an "arbitrary length limb" idea. IK chains can already be arbitrary length, but to allow that for limbs... might be super tricky. Especially when it comes to IK->FK snapping!
	Curve
		Add "X Symmetry" parameter, when enabled, determine hook bone sides automatically based on X coordinate sign, and flip bones on one side so mirror posing works as expected. An actual symmetrical curve shape is not enforced, but expected.
		Seems to sometimes hook the wrong bones to the wrong curve point?? (On pip, eg. after scaling CUR-Eye.L -1 Z around its center in edit mode)
		Lunte face breaks when generating with button instead of operator, no clue why, didn't investigate, don't have time.
	cloud_bone
		Create Deform option should maybe only show up when the bone's Deform option is enabled. In this case the bone's use_deform would be False, but a new def bone is created instead.
		Split up into cloud_tweak for the tweaking functionality, maybe one can extend the other idk.
		Rework the entire thing so it uses BoneInfo instead of doing things normally? Not sure, should think about pros and cons.

	Add operators in the UI somewhere, somehow.

CloudRig Code Quality
	Consider if cloud_utils needs to be split up further, but even if not, definitely rename it to something more descriptive and move it out of rigs folder.
	All UI functions that take a UILayout as first parameter should be prefixed with ui_ or draw_ instead of a random mix of ui_/draw_ prefix/suffixes that we have now...
	I think it's still arbitrary whether we use the work make, create, or define. If it isn't, we should probably write some documentation about the code structure and my conventions and include it in the wiki. (I'm thinking a "How to contribute" page or so)
	Consider where we want to use typing and where not.
	Look at PEP-8 again and do a pass on everything to make it PEP-8 compliant.
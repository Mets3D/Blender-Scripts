Rain TODO:
	- Rename rain_rig.blend to rain.blend for the final release.

Pablo TODO:
	- Make an operator that mirrors a bone's transforms to the opposite bone, around an arbitrary bone as the mirror axis.
	- Try to implement a brute force method of more precise IK->FK snapping with pole target.

Tutorial TODO:
	Strip out the weight painting toolset from MetsTools as a separate addon for cleanliness.
	Explain some features which I don't use

Tutorial ideas:
	Developing your own Rigify feature set
		How to set up file structure, how to name classes, etc.
		Explain generation stages

Rigify patch ideas
	clean up imports, cause there are unused ones, eg. generate.py imports copy_attributes, never uses it.
	
	legacy/rigs/delta.py seems useless.
	rigs/experimental/super_eye.py is empty.

	WTF???!?!?! Generate any rigify rig, open a drivers editor and search for any bbone property. It seems like those things are supposed to have drivers? But they are on bone instead of pose.bone, therefore they do nothing! WHAT!??
		Oh okay maybe I get it - it's the edit mode properties... and they are driven instead of the pose mode properties... which makes no sense, but okay.


	driver_add() should not be allowed to halt generation with a useless error message, such as when the data path is invalid. It should just throw a big ol' warning and skip that driver.
	entire mechanism.py contains no reference to id_type. This means Single Property drivers can only ever be referencing Object datablocks. This is terrible.
	Add support for make_constraints for Armature constraints and the targets{} dict.
	Clean up badly named parameters (that show up in the ui with underscores and all lowercase)
	Link things to the blender manual
	Add user-facing operators to the UI, somewhere.
	Use BoolVectorProperty subtype='LAYER' instead of hard-coded layer UI drawing
	Move rigify properties into a propertygroup
	From CloudRig: 
		make make_property be more like cloud_utils.make_custom_property
			add subtype support to make_property().
		add copy_property from cloud_utils to rigify.
		add copy_driver() from cloud_utils to mechanism.py, and use it from the legacy code that copies drivers.

		Add all my operators.
		Add scale management so it doesn't generate like shit at small or large scales.
		Give BBone scale the same significance as in CloudRig.
		Rework widget management - only use procedural generation when it makes sense, otherwise load from file. Stop making a unique object for every bone, re-use existing instead.
	
	
	Add Tangent controls(with bbone scale drivers) for BBones(maybe as parameter) for all chain rigs.
	Rename ORG bones before joining duplicated metarig into generated rig. Justification is that drivers that were targetting non-ORG bones don't get mis-targeted this way.
		Rigify already worked around this by messing up such drivers' targets, and then un-messing them up later, but to me that seems unneccessarily convoluted.
	Call register() and unregister() on feature sets before removing them. (there was an issue with this but I don't quite remember)
		Add this to the documentation.
	Add more GeneratorParameters to disable currently hardcoded functionality.
		Add warning to Force Widgets Update that it is slow as shit.
	
	
	Rework the bone group system to be like mine.
	As an even longer term goal, make it so that I don't have to implement my own Generator class, because the rigify generator should be able to do everything I need it to do.

BBone Face Rig idea:
	What if there are two layers of BBones? One is Automatic, the other is Tangent.
	We then steal the tangents of the Automatic with Copy Transforms constraints that have splining enabled.
	meh, you still need two bones to do translation+rotation separately methinks.
	Control
		Automatic chain
			Automatic angle reader
				Tangent angle (parented)
	In this setup, how do we get the local rotation of Control to affect Tangent angle in a predictable way?

Next Rig notes:
	- Four lip controls per quarter of lip instead of 3.

Addon idea:
	Make a better Shift+D (duplicate bone) behaviour, where instead of slamming a .001 at the end of the bone name, it increments whatever number it finds in the bone name, and it does the same on the right side.
	Make a Straighten Bone Chain operator for armature edit mode, to straighten IK chains - Head and tail of the chain wouldn't move, eveything in between gets redistributed to the same length ratios as before along a perfectly straight line.

Settlers TODO:
	Phileas:
		- His mouth bones are named with the wrong sides, and was released that way in V1, yikes!
	Lunte:
		- Add new masking tech to the teeth, rename bones.
		- Teeth names could use some love, but then gotta run the curve renaming script on everything again.
		- Eye names aren't symmetrical - do it like gabby. I think the right eye's curves should be scaled -1 in edit mode, maybe?

CloudRig TODO:
	Rigify compatibility
		- When enabled, cloud_bones with use_deform=True get overwritten to False.
		- When enabled, bone groups assigned in cloud_bone seem to get overwritten.
		Rigify compatibility specific functions should only affect rigify rig types.

	Make outline of some video I could make, by Tuesday.
		- Secrets of Weight Painting.
		- Developing your own Rigify Feature Set.
		- Re-make Pip video slightly longer, going into a bit more detail and explanations.

	Bug: IK-CTR-Chest flies away when moving the chest master far, needs a DSP- bone?
	
	Documentation:
		Add gifs to CloudRig Types page (do it at home with ShareX)
		- Put something on the home page? Hell it could be just a duplicate of the readme, or a re-listing of what's already in the sidebar, idk.
		- Update readme with links to the wiki and more up-to-date screenshots.

	Ivan Cappiello says they have some WIP face rigify rigs at MAD, and we could discuss if I'm interested in contributing code to it. https://blender.chat/channel/blender-riggers?msg=p2Eahj4aXntp8rdRN

	Eye Track
		A rig that sets up an eye target thingie.
			The bone that holds the rig is the eye bone itself. The target is created some distance in front of it (along local Y axis)
			params:
				- Target group - all Eye rigs with the same Target Group will have a shared parent control, whose name will be based on this parameter, and location and bone shape based on the average location of the look targets in the group.
				- Target distance - how far in front the eye target should be created. (No rig scale applied! Unless it's made clear that this is given as some sort of ratio number.)
	Chain
		Recursive generation of STR layers as per Pablo's request, so we don't just have main and sub STR controls, but any number of nested layers(although we would probably never use more than 3, but then again, I thought we would never use more than 2, so)
		Spline IK like controls(the other two types) for bendy bones' handles.
	IK Chain
		Ability to have IK control at the end
			Should deprecate ik chain length param first, which might be a day's worth of work.
	FK Chain
		Counter-Rotate STR param should disable the deform_segments chain param.
	IK Fingers
		Would extend IK chain, but rotating the IK control would sort of bend the finger somehow, or something.
		Param for useless curl controls
		Finger controls should go on a finger layer, and their UI needs to be figured out, so they don't clutter too much.
	IK/FK Snapping
		pole vector distance should be relative to the scale of the rig. I wonder how it works right now on very small or large rigs.
		Even going back to Rain, the IK snapping can have pretty shit results when the FK bones are rotated arbitrarily.
	Spine
		Maybe should be split up to Spine/Neck/Head rigs. Or well, just remove the neck and head, and those should be separate FK chain rigs. Might make the code a lot simpler, but also might not.
		IK-CTR-Spine should have a copy rotation constraint to MSTR-Hips and possibly also MSTR-Chest. Ofc, implement this in a smart way, that works with arbitrary spine length. (Similar deal to how STR bones stay inbetween STR main bones, but in this case it's rotation instead of location)
		IMPORTANT: Should force chain segments to 1.
		IK/FK snapping? I'm guessing it's non-trivial, otherwise we would've done it. But it should be possible.
		Transformation constraints on FK-C bones (maybe make this optional)
			Their values would probably have to be dependent on the length of the bone. Ie, a long bone should slide more when it's rotated, compared to a short bone.
			Test if these can be overwritten by a cloud_bone rig.
	IK limbs
		Deprecate IK chain length parameter. Is a bit tricky cause it's used by foot rigs to put the IK control in the middle of the chain, but that should be handled differently. IK chain length should be implied from the length of the connected ORG chain.
		feet control shouldn't be forced onto the floor, maybe based on an option, or use anklepivot bone, or whatever.
		ROLL-Foot.L shouldn't have its tail be offset in a flat forward direction. Instead, make it perpendicular to the knee, pointing towards the toe. (cross product of knee and toe bones' vectors?)
		Some smartypants way of ensuring that the IK pole, when IK Pole Follow is enabled, follows the IK control on its roll axis, but not the other axes?
		Scissor limb rig possible? (limb with an extra bone to help elbow/knee deformation) - Can it work in FK?
	Curve
		Add "X Symmetry" parameter, when enabled, determine hook bone sides automatically based on X coordinate sign, and flip bones on one side so mirror posing works as expected. An actual symmetrical curve shape is not enforced, but expected.
		Seems to sometimes hook the wrong bones to the wrong curve point?? (On pip, eg. after scaling CUR-Eye.L -1 Z around its center in edit mode)
		Lunte face breaks when generating with button instead of operator, no clue why, didn't investigate, don't have time.
	Spline IK
		Curve option shows warning for missing curve, even though this guy doesn't need a curve to be selected... In fact, that parameter should probably be disabled. (not hidden)
		Or maybe this curve param should be separate from the other one. Then we could have separate tooltips, which would be nice.
	Bone
		Option to copy all children of the bone as well. This would let us be lazy for a while and attach entire manually rigged components to the generated rig, which would be a nice plan B if the face generation doesn't become a thing.
		Create Deform option should maybe only show up when the bone's Deform option is disabled... otherwise it's a bit error-prone.
	
	Manage bone rotation modes better - Currently we set everything to an arbitrary rotation mode, I think? We should probably copy the rotation mode from the metarig.
		Perhaps all this needs to be is the classic custom property+driver to let anyone change the rotation mode on the fly for bones that could require it. (shoulders, wrists, thighs, feets)

	Generator parameter: Show Warnings
		When enabled, this will add a custom property to the rig data, to indicate to the UI script to add a new panel to the Properties Editor.
		This panel would be called CloudRig Log. It would read warnings and errors from the rig data, where it is written to from generation-time.
	MetsRig: Bring in features from MetsRig, where reasonable.
		Bring back BoolProperties?
		Property hierarchy? Could it be done better though?


	Add operators in the UI somewhere, somehow.

	Implement a quadruped limb rig, similar to Autumn's hind leg.

	Face!

	Drivers for bone rotation types?
	Would be nice if rig samples could be loaded from a .blend file instead of code-based generation bs. For metarigs it seems easy. For rig samples, it might be tricky because we have to juggle object modes.

	Picker UI? based on https://github.com/jayanam/bl_ui_widgets. Would be quite a big endeavour, and I don't hear a lot of people asking for it.
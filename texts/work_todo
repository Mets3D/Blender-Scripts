Sprites TODO:
	Probably wanna rig Victoria soon, with Sergey's riggable hair particle technologies.

CloudRig TODO:
	Priority 0: Requested
	Priority 1: New features

		Jaw rig: Specify any number of cloud_face_chain rigs, and the controls of these would be automagically parented between the jaw and the jaw's parent (expected to be the head) with some sort of influence gradient. Could really use a custom widget though.
			The chain rigs should be aware of the jaw rather than the other way around?
			I would only implement this after doing some rigs with simple Armature constraint re-linking, to see if I end up following an easily reproducible logic with setting the influences, because I'm really not sure.
		Parent candidate identifiers are currently hard-coded, which eg. means eye target parent switching won't work if the head bone is called anything other than "Head". 
			An idea is to add a new "Parent Switching" parameter section, similar to Bone Sets. 
			This would be a list of lists, eg. "IK Master Parents", "IK Pole Parents", "Eye Target Parents" which are CollectionProperties with String type that prop_search() in the generated rig's bones to define a list of parents to switch between.
			But it might make setting up new metarigs more complicated, since these couldn't be pre-filled properly.
			Also I don't think CollectionProperties are allowed in rigify parameters.
	Priority 2: Changes that will affect metarigs
	Priority 3: Bugs
		Various IK related features *probably* currently only work in certain orientations... Need to list them, test them and fix them:
			- IK/FK snapping
			- Flatten Bones operator
			- AutoRubberHose control rotation
	Priority 4: Code quality
		use reparent_bone() in more places. All sorts of places! (ie. root bone of every rig, including cloud_bone)
		Try splitting up cloud_bone into cloud_tweak and cloud_copy.
		cloud_base should define a deformation bone set and every rig should just use that one.
	Priority 5: UI, UX & documentation
		Add operators in the UI somewhere, somehow.
		Add gifs to CloudRig Types page (do it at home with ShareX)
		Hidden layers shouldn't be set by starting them with a dollar$ign but instead with an eye icon... Not sure if easily possible though since we'd have to hack into the rigify layers propertygroup which I don't want to do.
		Using a UIList for BoneSets would be great but I tried and it seemed impossible to do it in a nice enough way.
		Add a template for reporting issues - only important when we go wide public, so probably after Sprites. https://gitlab.com/help/user/project/description_templates
	Priority 6: Rigify compatibility
		When enabled, bone groups assigned in cloud_bone seem to get overwritten.
		Rigify compatibility specific functions should only affect rigify rig types.
	Priority 7: Upstream fixes and features to Rigify.
		Get these patches approved and committed
			D8496 D8519 D8524

CloudRig ideas:
	Try implementing the full body IK systems from angavrilov?

	Generate test animation for FK rigs.

	cloud_finger
		Would extend IK chain, but rotating the IK control would sort of bend the finger somehow, or something.
		Param for useless curl controls
		I'm thinking several fingers could come together into a palm, but maybe that should just be an Action constraint type of deal.
	cloud_instance
		This would be a single bone rig with a single parameter, which is another bone from the metarig which has a rigify type.
		This bone would act as an instance of that entire rig element, copying all its child rigs and everything. Crazy stuff. Not sure if possible.
		But wait, the hard part of this is name conflicts. Bone names have to be unique, obviously, but if you just copy over all the bones... hmm... more parameters to handle name replacement? probably a similar deal to the batch rename tool. weird stuff.

	Bone Sets
		Instead of having 3 checkboxes on the generator level for overriding DEF/MCH/ORG assignments,
		it would be better to have those checkboxes on the individual rig parameters. Then, when those checkboxes are enabled, we draw the generator override layers grayed out, and when disabled, we draw the rig parameter layers normally.
		Documentation for this would need an update too.

	It would be amazing if both Bone Sets and BoneInfo stuff was something outside of CloudBaseRig, such that one could just take those files and import them in a regular Rigify rig or their own featureset. But idk if it would really be possible since they rely on modified generator code...

	Customizing bone shapes would be pretty neat.
		I'm thinking an enum dropdown where we list out all the available widget names from Widgets.blend.
		I'm thinking a Bone Shapes parameter section underneath Bone Sets.
		What are the use cases for this currently? Feel like it's not that many. Pretty much FK and STR. Might be better not to overthink this one and just add an enum to cloud_chain between sphere or cube.

	Manage bone rotation modes better - Currently we set everything to an arbitrary rotation mode, I think? We should probably copy the rotation mode from the metarig.
		Perhaps all this needs to be is the classic custom property+driver to let anyone change the rotation mode on the fly for bones that could require it. (shoulders, wrists, thighs, feets)

	Generator parameter: Show Warnings
		When enabled, this will add a custom property to the rig data, to indicate to the UI script to add a new panel to the Properties Editor.
		This panel would be called CloudRig Log. It would read warnings and errors from the rig data, where it is written to from generation-time.
	
	Bring back BoolProperties? Issue is animating them works badly. (doesn't work) because they rely on the update callback which is not called when changed by a keyframe.

	Overlay:
		- Display bone shape size as a circle around bones
		- Display AutoRubberHose control position

		- Display aim target position and group aim target position

		Interactable widgets?
			These are indeed possible, see auto_fmap_widgets, bpy.types.GizmoGroup.
			- Make the pole target thing into an interactable widget.
			- Heel position
		- Picker UI? This would already be possible, but would have to go into cloudrig.py, so, that's a bit yikes.

Rigify patch ideas
	Bugs
		super_palm seems to parent to the wrong bone when its parent rig has Limb Segments==1.

	Documentation
		https://docs.blender.org/manual/en/dev/addons/rigging/rigify/basics.html#library-linking is still talking about groups, a la 2.79.
		https://docs.blender.org/manual/en/latest/addons/rigging/rigify/bone_positioning.html#fingers-bones
			"If your characterâ€™s hand is placed like the above figures" - there are no figures.
			As https://developer.blender.org/T79833 points out, this section should mention the rotation axis rig parameter, since Manual X might be better than Automatic.

	Code Quality
		Rename ORG bones before joining duplicated metarig into generated rig. Justification is that drivers that were targetting non-ORG bones don't get mis-targeted this way.
			Rigify already worked around this by messing up such drivers' targets, and then un-messing them up later, but to me that seems unneccessarily convoluted.
		There is a lot of random shit in rigify/ui.py, eg. tons of IK/FK operators and whatever else. It's used code, but it doesn't belong in a file named "ui.py"!!
		- Bunch of rig types (at least in Legacy) redefine each others' parameters... not good.

	Architecture
		Rework the way parameters are registered, there is a lot of hacking around going on now, eg. __init__->ParameterValidator.
			Every rig type should have its own namespace so it can't possibly ever conflict with another rig type. Having to worry about avoiding these conflicts is annoying.
				This means every rig type should have its own PropertyGroup.
					How does inheritance work with that? I don't think it does... frick.

		Think of how we could set up a centralized way of downloading feature sets for Rigify. Ideally, feature set maintainers wouldn't have to get commit rights to the addons repo, and wouldn't have to work in the addons repo.
			Maybe Rigify could just have a list of repository URLs and be able to pull from them at the click of a button? Is that insane?
			That would also mean being able to update your feature set at the click of a button. It sounds pretty damn good, but idk. Maybe complicated. Maybe not secure. Etc.
				Simpler: These community-maintained feature sets would simply have a button with a link to them in the feature set UI. When they are installed, the "Download" button is replaced by the "Remove" button - but there is no one-click download from Blender. We just give you the link, you have to download and install the feature set.

	UI
		Improve the UI where feature sets are installed, particularly the way they are listed - their titles are so close to each other and don't look like titles.
			D8519 stuck in Review Limbo since August, number of requests for review is in the dozens, idk what to do :shrug:
		Link things to the blender manual
			D8524, D9081 waiting for Aaron Carlisle.
		Add "Rigify Dev Tools" operators to the UI.
			They already exist in the sidebar but apparently that is not searchable. Would rather add them to a new sub-menu called Rigify, within the Armature menu in armature edit mode.
			Generate operator shouldn't be set to 'INTERNAL'.

	Features
		Add support for make_constraints for Armature constraints and the targets{} dict.
		entire mechanism.py contains no reference to id_type. This means Single Property drivers can only ever be referencing Object datablocks.
			Should get a use case before I go fixing this.
		driver_add() should not be allowed to halt generation with a useless error message, such as when the data path is invalid. It should just throw a big ol' warning and skip that driver.
			In general, better error reporting would be great.
		From CloudRig: 
			The ultimate long term goal would be that we should be able to remove the CloudGenerator class without any compromises. This would require upstreaming lots of functionality, without stepping on any toes.
			Add bbone scale drivers for BBones(maybe as parameter) for all chain rigs.
			add copy_property from cloud_utils to rigify.
			add copy_driver() from cloud_utils to mechanism.py, and use it from the legacy code that copies drivers.

			Add all my operators.
			Add scale management so it doesn't generate like shit at small or large scales.
			Give BBone scale the same significance as in CloudRig.
			Rework widget management - only use procedural generation when it makes sense, otherwise load from file. Stop making a unique object for every bone, re-use existing instead.

			Add more GeneratorParameters to disable currently hardcoded functionality.
				Add warning to Force Widgets Update that it is slow as shit.

			Rework the bone group system to be like mine.
				Actually, rigify/utils/layers.py implements a class that reminds me a lot of BoneSet, just calls it ControlLayersOption. Interesting.

Bug reports:
	- Putting a driver on data.bones["Bone"].bbone_scaleoutx and such bbone scale values doesn't affect the pose deformation being applied to the meshes. This value effectively acts as a bbone display size - which actually sort of makes sense. What's strange though, is that drivers on the curve values behaves identical as if they were on the pose bone properties.
		Fixing this would totally break Rigify, because it relies on this bug...

Addon ideas:
	https://twitter.com/soyposmoderno/status/1307222594047758337
	On a linked and overridden rig, create a lattice at the 3d cursor, slap a Lattice modifier on the active object targetting it, hook up the middle of the cage to an empty, parent that empty to another empty which also owns the lattice. Scale the parent empty to increase the lattice's influence, transform the child lattice to deform the mesh.

	Add an operator to Selection Sets addon that lets you select one from a list of selection sets, which is the list of selection sets that any of the currently selected bones are in. On confirm, select all bones belonging to that selection set.
	Make a better Shift+D (duplicate bone) behaviour, where instead of slamming a .001 at the end of the bone name, it increments whatever number it finds in the bone name, and it does the same on the right side.
	Make a Straighten Bone Chain operator for armature edit mode, to straighten IK chains - Head and tail of the chain wouldn't move, eveything in between gets redistributed to the same length ratios as before along a perfectly straight line.
	Add Copy Custom Properties to the Copy Attributes addon.

Tutorial ideas:
	Developing your own Rigify feature set
		How to set up file structure, how to name classes, etc.
		Explain generation stages

Settlers TODO:
	Phileas:
		- His mouth bones are named with the wrong sides, and was released that way in V1, yikes!
	Lunte:
		- Add new masking tech to the teeth, rename bones.
		- Teeth names could use some love, but then gotta run the curve renaming script on everything again.
		- Eye names aren't symmetrical - do it like gabby. I think the right eye's curves should be scaled -1 in edit mode, maybe?

SVN passwords:
	Sprites: azecungrd56d?Fje
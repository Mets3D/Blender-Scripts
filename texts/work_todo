Rex:
	Try to pose some of Julien's extreme poses, see what breaks, see how it can be improved

Update Sprite to latest and add empty bones

Lattice Magic:
	Option to create at geometry center instead of 3d cursor?
	Idea?
		Generate an armature rig for the lattice, so the guys are animating bones instead of shape key values.

	Tweak Lattice: Add bone selector above "Create Lattice" button.
	Add button to add and remove objects to and from a tweak lattice (maybe even camera lattice)

Sprites:
	https://docs.google.com/spreadsheets/d/1I6sVPwdcoB9gdht9Zqdl4kx7EKbYgqyb9I6EFUdJO3E/edit#gid=1265024552
	Character Checklist:
		- Consistency script was run on the armature
		- Might want to remove the Spine cloud_tweak bones, but I guess wait for feedback on Rex first.
		- Tracking bones are in the right place
		- Quality slider
		- Arm/Leg Masking

CloudRig TODO:
	Ellie fanny pack swapping: Want to put drivers on relinked constraints on cloud_face_chain.
		This would mean: Reading constraint drivers in bone.py->bone_info_from_real() thingie function
			Then in ConstraintInfo.relink() also relink the drivers (mechanism.py already has a copy_and_relink_drivers())
	Delete Lock Y/Z param from FK chain, is useless af.


	Priority 0: Requested
	Priority 1: New features
		Add a date to the generated rig so it can be known when it was generated. Could even be displayed in the cloudrig ui.
		(Requested) cloud_leg should have a new foot roll parameter called "secondary activation angle" or something better, which can be adjusted to improve behaviour for high heels, ie. the second bone's rotation will trigger sooner.
		Active layers on the generated rig shouldn't be the same as the metarig afterall - or maybe it should be an option (sometimes we do enable the deform layer because we want to see it on generation)
		Perhaps some parameters could belong all the way up in CloudBaseRig.
			- Parent to DEF
			- Delete ORG bones (can force to False for rigs that need it)
			- Relink constraints (This may be implemented differently for each rig)
	Priority 2: Bugs
		cloud_aim ORG bone use_deform is copied from the metarig, but it should always be False!
		!!! We need a better heuristic for picking which controller STR-I controls should align with.
			It can be anything, even if it's stupid, like, pick the shortest bone, or the one with the largest absolute X coordinate, but it has to be SOMETHING, to ensure symmetry.
			Even better would be something controllable though. Eg., for `STR-I-Bridge_Cheek1_3+Jaw1_3+Jaw3_3.L`, we want the middle one to be the main one for no particular reason.

		Ask animators what they would expect to happen when leg IK stretch is off and then using footroll.
			Currently in this case, the leg ends up becoming not fully extended.
			It's always been like this (since Rain) so I wonder if this behaviour is expected.
			The alternative would be that when Stretch is disabled, but the IK master is out of range, we switch to a different behaviour where the foot roll essentially just rotates the foot without the toes inheriting the rotation, which really sounds not useful at all to me.
		I wonder if we could fix mismatches between rest pose and true rest pose - it seems mostly to do with bendy bone twisting. Can be noticed when objects are unparented from the armature and the armature is moved, or simply toggling between rest pose and real rest pose. Not a big deal though.
		
		The IK prediction overlay uses the active bone on cloud_ik_chain instead of the base bone.
		- temp_highlight_group from overlay.py gets into the generated rig, ugh.
			- It feels really good but it's really not worth the trouble. Things like Select Groupped fail, my custom Assign Bone Group operator is annoying to use because of it, etc.
			- If we can implement this as a gizmo then great, otherwise, cut it.
			- Will also stick around when saving the file which I'm not a fan of. (Someone without the addon could end up with it and wonder wtf it is)
		Various IK related features *probably* currently only work in certain orientations... Need to list them, test them and fix them:
			- IK/FK snapping
			- AutoRubberHose control roll angle
	Priority 3: Changes that will affect metarigs
	Priority 4: Code quality
		Uses of the variable `org_parent` are currently satanic. Should either be avoided, or made uniform, so all BoneInfo instances have an `org_parent` or have a dictionary that keeps track of that relationship. (latter is better I think, can probably be used in other cases)
		Other satanic variables:
			org_bone.def_bones
		
		Find better way to define and reference bone sets instead of slapping on new properties in ensure_bone_sets(), that's hard to follow.
		I guess I wouldn't mind an enum class in each rig's file, like
		class BoneSets:
			DEF = BoneSet()
		but idk if that could work.

		It sucks that define_bone_sets() and ensure_bone_sets() are always so far away from each other, and even just the fact that they both have to exist irks me a lot.
			The reason they both have to exist is because we want to assign them to self, but honestly that's probably not even a good thing to do.
			We could instead maybe have a self.bone_sets[] that's automatically populated based on class information on initialize(), and then accessed as strings, eg.
			instead of self.def_chain it'd be self.bone_sets['DEF']. We could make our own class BoneSets(dict) if we want to execute custom code on keyword access.
			All of this existed before but was deemed clunky - maybe it wasn't.
		I also hate the "enum" cls.default_layers. it's basically just an immutable dictionary, it's lame af. Would rather just have a class with mutable class vars, ie.
		class DefaultLayers:
			IK = 16
		and then just import that everywhere. Or cls.DefaultLayers.IK. Can we put a class within a class?

		Bring up to date how we pass armature constraints to make_constraint() (D9092)
			This will break backwards comp though, so should create a tag accordingly.
		Remove parentheses from if() (search for `if(`)
		use reparent_bone() in more places. All sorts of places! (ie. root bone of every rig, including cloud_bone)
		Try splitting up cloud_bone into cloud_tweak and cloud_copy.
		cloud_base should define a deformation bone set and every rig should just use that one.
	Priority 5: UI, UX & documentation
		cloud_chain has new Unlock Deform parameter.
		Turn the "code crap" wiki page into a proper "Contribute" page - The project is now big enough that I would actually welcome if someone competent wanted to join me in working on this.
			Describe versioning code
			Organize better with modules as the headers.
		Add operators in the UI somewhere, somehow.
		Update cloud_bone being split up to cloud_tweak and cloud_copy.
		Add gifs to CloudRig Types page (do it at home with ShareX)
		Hidden layers shouldn't be set by starting them with a dollar$ign but instead with an eye icon... Not sure if easily possible though since we'd have to hack into the rigify layers propertygroup which I don't want to do.
		Using a UIList for BoneSets would be great but I tried and it seemed impossible to do it in a nice enough way.
		Add a template for reporting issues - only important when we go wide public, so probably after Sprites. https://gitlab.com/help/user/project/description_templates
	Priority 6: Rigify compatibility
		When enabled, bone groups assigned in cloud_bone seem to get overwritten.
		Rigify compatibility specific functions should only affect rigify rig types.

CloudRig ideas:
	Rigs:
		Try implementing the full body IK systems from angavrilov?

		cloud_finger
			Would extend IK chain, but rotating the IK control would sort of bend the finger somehow, or something.
			Param for useless curl controls
			I'm thinking several fingers could come together into a palm, but maybe that should just be an Action constraint type of deal.
		cloud_instance
			This would be a single bone rig with a single parameter, which is another bone from the metarig which has a rigify type.
			This bone would act as an instance of that entire rig element, copying all its child rigs and everything. Crazy stuff. Not sure if possible.
			But wait, the hard part of this is name conflicts. Bone names have to be unique, obviously, but if you just copy over all the bones... hmm... more parameters to handle name replacement? probably a similar deal to the batch rename tool. weird stuff.
		cloud_ik_chain
			Add display helpers for IK master controls. This display helper should stick to the end of the IK chain when IK stretch is disabled. This is so that the IK control doesn't get lost.

	Bone Sets
		Instead of having 3 checkboxes on the generator level for overriding DEF/MCH/ORG assignments,
		it would be better to have those checkboxes on the individual rig parameters. Then, when those checkboxes are enabled, we draw the generator override layers grayed out, and when disabled, we draw the rig parameter layers normally.
		Documentation for this would need an update too.
		It would be amazing if both Bone Sets and BoneInfo stuff was something outside of CloudBaseRig, such that one could just take those files and import them in a regular Rigify rig or their own featureset. But idk if it would really be possible since they rely on modified generator code...

	Logging:
		Add documentation.

	Actions:
		When adding a new Rigify Action, it should duplicate the data of the previously active one.

	Overlay:
		- Convert existing overlay into a gizmo instead. Less hacky.
		- Display bone shape size as a circle around bones
	
		cloud_limb
			- Display AutoRubberHose control position
		cloud_aim
			- Display aim target position and group aim target position
		cloud_eyelid
			- Display lines representing ROT bones

		Interactable widgets?
			These are indeed possible, see auto_fmap_widgets, bpy.types.GizmoGroup.
			- Make the pole target thing into an interactable widget.
			- Heel position
		- Picker UI? This could rely on an external addon, and we'd just generate data for that addon. But maybe even cooler if it's just included in cloudrig.py. That's probably a LOT of code to include though.

	Customizing bone shapes would be pretty neat.
		I'm thinking an enum dropdown where we list out all the available widget names from Widgets.blend.
		I'm thinking a Bone Shapes parameter section underneath Bone Sets.
		What are the use cases for this currently? Feel like it's not that many. Pretty much FK and STR. Might be better not to overthink this one and just add an enum to cloud_chain between sphere or cube.

	Manage bone rotation modes better - Currently we set everything to an arbitrary rotation mode, I think? We should probably copy the rotation mode from the metarig.
		Perhaps all this needs to be is the classic custom property+driver to let anyone change the rotation mode on the fly for bones that could require it. (shoulders, wrists, thighs, feets)

	Bring back BoolProperties? Issue is animating them works badly. (doesn't work) because they rely on the update callback which is not called when changed by a keyframe.

Rigify patch ideas
	Make a huge (probably nested) design proposal on Phabricator about Rigify improvements that I'd like to implement (including many CloudRig features)

	Bugs
		super_palm seems to parent to the wrong bone when its parent rig has Limb Segments==1.

	Code Quality
		Strip out the entire rot_mode.py into a separate addon. It has nothing to do with Rigify!
			Do this after D9096.
		Rename ORG bones before joining duplicated metarig into generated rig. Justification is that drivers that were targetting non-ORG bones don't get mis-targeted this way.
			Rigify already worked around this by messing up such drivers' targets, and then un-messing them up later, but to me that seems unneccessarily convoluted.
		There is a lot of random shit in rigify/ui.py, eg. tons of IK/FK operators and whatever else. It's used code, but it doesn't belong in a file named "ui.py"!!
		- Bunch of rig types (at least in Legacy) redefine each others' parameters... not good.

	Architecture
		Rework the way parameters are registered, there is a lot of hacking around going on now, eg. __init__->ParameterValidator.
			Every rig type should have its own namespace so it can't possibly ever conflict with another rig type. Having to worry about avoiding these conflicts is annoying.
			This means every rig type should have its own PropertyGroup.
			How does inheritance work with that? I don't think it does... frick.

		Set up a centralized way of downloading feature sets for Rigify. 
			Ideally, feature set maintainers wouldn't have to get commit rights to the addons repo, and wouldn't have to work in the addons repo.
			Add built-in "dummy" entries to the FeatureSetList feature added in D8519.
			Candidates:
				https://gitlab.com/lfs.coop/blender/rigify-pantins
				https://docs.blender.org/manual/en/dev/addons/rigging/rigify/feature_sets.html
					https://github.com/cessen/cessen_rigify_ext
					https://github.com/angavrilov/angavrilov-rigs

	UI
		Add operators to the UI.
			D9094

	Features
		Rig samples should spawn at cursor instead of object origin.
		Horse leg crap 
			D8496 I don't even care about this, I was doing it as a favor and it goes ignored... very cool.
		entire mechanism.py contains no reference to id_type. This means Single Property drivers can only ever be referencing Object datablocks.
			Should get a use case before I go fixing this.
		driver_add() should not be allowed to halt generation with a useless error message, such as when the data path is invalid. It should just throw a big ol' warning and skip that driver.
			In general, better error reporting would be great.
		From CloudRig: 
			The ultimate long term goal would be that we should be able to remove the CloudGenerator class without any compromises. This would require upstreaming lots of functionality, without stepping on any toes.
			Add bbone scale drivers for BBones(maybe as parameter) for all chain rigs.
			add copy_driver() from cloud_utils to mechanism.py, and use it from the legacy code that copies drivers.

			Add all my operators.
				Waiting for D9094 first.
			Add scale management so it doesn't generate like shit at small or large scales.
			Give BBone scale the same significance as in CloudRig.
			Rework widget management - only use procedural generation when it makes sense, otherwise load from file. Stop making a unique object for every bone, re-use existing instead.

			Add more GeneratorParameters to disable currently hardcoded functionality.
				Add warning to Force Widgets Update that it is slow as shit.

			Rework the bone group system to be like mine.
				Actually, rigify/utils/layers.py implements a class that reminds me a lot of BoneSet, just calls it ControlLayersOption. Interesting.

Bug reports:
	- Putting a driver on data.bones["Bone"].bbone_scaleoutx and such bbone scale values doesn't affect the pose deformation being applied to the meshes. This value effectively acts as a bbone display size - which actually sort of makes sense. What's strange though, is that drivers on the curve values behaves identical as if they were on the pose bone properties.
		Fixing this would totally break Rigify, because it relies on this bug...